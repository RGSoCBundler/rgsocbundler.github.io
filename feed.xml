<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RGSoC Bundler Team Blog</title>
  <subtitle>Women Contributing to Open Source Software</subtitle>
  <id>http://rgsocbundler.github.io/</id>
  <link href="http://rgsocbundler.github.io/"/>
  <link href="http://rgsocbundler.github.io/feed.xml" rel="self"/>
  <updated>2013-09-06T20:15:00Z</updated>
  <author>
    <name>Jen Diamond</name>
  </author>
  <author>
    <name>Joyce Hsu</name>
  </author>
  <author>
    <name>Jessica Suttles</name>
  </author>
  <entry>
    <title>Week 8 Day 38 Gem Features</title>
    <link rel="alternate" href="/2013/09/06/week8-day38.html"/>
    <id>/2013/09/06/week8-day38.html</id>
    <published>2013-09-06T20:15:00Z</published>
    <updated>2013-09-06T20:15:00Z</updated>
    <author>
      <name>RGSoCBundler</name>
    </author>
    <content type="html">&lt;h1 id="week-8-day-38"&gt;Week 8 Day 38&lt;/h1&gt;

&lt;h2 id="gem-features"&gt;Gem Features&lt;/h2&gt;

&lt;h3 id="jens-friday"&gt;Jen's Friday&lt;/h3&gt;
&lt;p&gt;I worked on finalizing all my pull requests. Almost all of them were merged including the invalid gemname issue on the actual bundler site. WOOOO!&lt;/p&gt;

&lt;h3 id="joyces-friday"&gt;Joyce's Friday&lt;/h3&gt;
&lt;p&gt;Installed ctags to make it easier to navigate/jump between code in a text editor.&lt;/p&gt;

&lt;p&gt;Installed the debugger gem, required it in our file, &lt;code&gt;lib/source/rubygems.rb&lt;/code&gt;, and added the word &lt;code&gt;debugger&lt;/code&gt; on the line where you want to check out what the code is doing. It is similar to irb. We added it in line 71 of &lt;code&gt;lib/bundler/source/rubygems.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We looked at where the old version of the gem should be added. For example, the &lt;code&gt;was (2.3.5)&lt;/code&gt; part of the message should go in the “Using” and the “Installing” messages.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;locked_spec&lt;/code&gt; - references the gemfile gems with the gem in the lockfile.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;locked_spec_version&lt;/code&gt; - stores the gem version from the gemfile.lock if the locked_spec matches&lt;/p&gt;

&lt;p&gt;Stored the original message, “Using #{spec.name} (#{spec.version})”, in the variable &lt;code&gt;using_message&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We only want to add the old version if the version of the gem is not the same as the one in the gemfile.lock (lockfile)&lt;/p&gt;

&lt;p&gt;So, we append the old_version to our “Using” and “Installing” message if that is true.&lt;/p&gt;

&lt;p&gt;Had to remove the debugger from our file so Rspec at least runs.&lt;/p&gt;

&lt;p&gt;Adding our code, broke the &lt;code&gt;spec/install/gemspec_spec.rb&lt;/code&gt; and &lt;code&gt;spec/update/gems_spec.rb&lt;/code&gt; Rspec tests because it can’t find a lockfile?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Week 8 Day 37 Silverlake Library &amp; Syrup</title>
    <link rel="alternate" href="/2013/09/05/week8-day37.html"/>
    <id>/2013/09/05/week8-day37.html</id>
    <published>2013-09-05T22:28:00Z</published>
    <updated>2013-09-05T22:28:00Z</updated>
    <author>
      <name>RGSoCBundler</name>
    </author>
    <content type="html">&lt;h1 id="week-8-day-37"&gt;Week 8 Day 37&lt;/h1&gt;

&lt;h2 id="silverlake-library--syrup"&gt;Silverlake Library &amp;amp; Syrup&lt;/h2&gt;

&lt;h3 id="knowledge-exchange"&gt;Knowledge Exchange&lt;/h3&gt;

&lt;p&gt;We met up at the Silverlake Library. We showed each other what we have been working on. Joyce showed the ronn files and the rake files that made the man pages. Jen showed the invalid gem issue she had been working on. We looked at the cli.rb file together.&lt;/p&gt;

&lt;p&gt;We worked on our own issues and gave each other suggestions.&lt;/p&gt;

&lt;p&gt;Joyce continued working on the Rspec test with a revised version that Andre gave, but it still doesn’t work. Worked on using the locked_gems method in lib/bundler.rb to find and display the old version from the lockfile. Navigated through the forest of files in the directory to see where the methods of locked_gems went.&lt;/p&gt;

&lt;p&gt;We headed over to Syrup for the meetup but due to the summer's heat only one other showed up to join us. We did however get some work done.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Week 8 Day 36 Thinking through Wednesday</title>
    <link rel="alternate" href="/2013/09/04/week8-day36.html"/>
    <id>/2013/09/04/week8-day36.html</id>
    <published>2013-09-05T00:10:00Z</published>
    <updated>2013-09-05T00:10:00Z</updated>
    <author>
      <name>RGSoCBundler</name>
    </author>
    <content type="html">&lt;h1 id="week-8-day-36"&gt;Week 8 Day 36&lt;/h1&gt;

&lt;h2 id="thinking-through-wednesday"&gt;Thinking through Wednesday&lt;/h2&gt;

&lt;h3 id="jens-wednesday"&gt;Jen's Wednesday&lt;/h3&gt;
&lt;p&gt;Met with Jessica at Pivotal Labs. We checked out the issue I am working on about returning a message when the gem name is invalid. We wrote a test for it and realized that my rspec wasn't working with the bundler files. Jessica, then Steve, then Lars tried a bunch of different things to make it work. In the end the only solution was to re-install my computer.&lt;/p&gt;

&lt;p&gt;When my computer was re-installed my test passed.&lt;/p&gt;

&lt;p&gt;When I was using Middleman earlier I was working in a branch. I signed back into it and I got this message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout invalid_gemname
  M Rakefile
  M bin/bundle_ruby
  M lib/bundler/templates/Executable
  M spec/bundler/dsl_spec.rb
  Switched to branch 'invalid_gemname'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/4949652/git-checkout-what-does-this-weird-output-mean"&gt;http://stackoverflow.com/questions/4949652/git-checkout-what-does-this-weird-output-mean&lt;/a&gt; (I figured that it was something like this but this is much clearer than what i was thinking.)&lt;/p&gt;

&lt;p&gt;That's the output of git status; git is showing you that after checking out master there are still uncommited changes to your working copy (one modified file and one deleted file).&lt;/p&gt;

&lt;p&gt;Check man git-status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;M = modified
A = added
D = deleted
R = renamed
C = copied
U = updated but unmerged
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="joyces-wednesday"&gt;Joyce's Wednesday&lt;/h3&gt;
&lt;p&gt;Worked on displaying the old version of the gem when bundle update gets run. The initial code added and tested with &lt;code&gt;dbundle update&lt;/code&gt; works to display the old version of the gem. But even if the gem did not update to a newer version, it displays the same version as the old version.&lt;/p&gt;

&lt;p&gt;Working on getting the rspec to pass. It isn’t working. There might be a bug?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Week 8 Day 35 We Have Issues</title>
    <link rel="alternate" href="/2013/09/03/week8-day35.html"/>
    <id>/2013/09/03/week8-day35.html</id>
    <published>2013-09-03T22:25:00Z</published>
    <updated>2013-09-03T22:25:00Z</updated>
    <author>
      <name>RGSoCBundler</name>
    </author>
    <content type="html">&lt;h1 id="week-8-day-35"&gt;Week 8 Day 35&lt;/h1&gt;

&lt;h2 id="we-have-issues"&gt;We Have Issues&lt;/h2&gt;

&lt;h3 id="joyces-tuesday"&gt;Joyce's Tuesday&lt;/h3&gt;

&lt;p&gt;Learned to set the path to blank for rspec test, that way it can’t find
git. Before, I manually “removed” git to get the test to pass.&lt;/p&gt;

&lt;p&gt;Wrote the rspec test based on spec/update/ directory and separated into
3 files based on if the gem source is from rubygems, git, or path.
I haven’t gotten the rspec to pass yet though.&lt;/p&gt;

&lt;p&gt;Andre gave the method to display the old gem version, which I added
in to the lib/bundler/source/rubygems.rb.&lt;/p&gt;

&lt;h3 id="jens-tuesday"&gt;Jen's Tuesday&lt;/h3&gt;

&lt;p&gt;It seemed like a Monday because of the Labor holiday. I re-did all my
pull requests from scratch so they would contain only the changes I
made with the changes from the pull upstream master. I was getting
confused that the FAQ page kept coming back into the branches that
I was working on. I thought that maybe I had made the other branches
from the FAQ branch.&lt;/p&gt;

&lt;p&gt;This is what was actually happening: even though it has not been
published the FAQ page has been merged into the master repo so when
I did a &lt;code&gt;git pull -i upstream master&lt;/code&gt; the FAQ page is included into my
files and that it supposed to be happening and it is not supposed to be deleted.&lt;/p&gt;

&lt;p&gt;After fixing all the PRs I started another issue in the bundler-feature area. #6&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Week 7 Day 34 It's Optimize Friday</title>
    <link rel="alternate" href="/2013/08/30/week7-day34.html"/>
    <id>/2013/08/30/week7-day34.html</id>
    <published>2013-08-31T01:48:00Z</published>
    <updated>2013-08-31T01:48:00Z</updated>
    <author>
      <name>RGSoCBundler</name>
    </author>
    <content type="html">&lt;h1 id="week-7-day-34"&gt;Week 7 Day 34&lt;/h1&gt;

&lt;h2 id="its-optimize-friday"&gt;It's Optimize Friday&lt;/h2&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/kfVsfOSbJY0" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;

&lt;p&gt;ORRRR&lt;/p&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/hxleH60hDJY" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;

&lt;h3 id="jens-friday"&gt;Jen's Friday&lt;/h3&gt;
&lt;p&gt;I am back to working on the issue where when you run &lt;code&gt;bundle oudated gem-not-in-your-Gemfile&lt;/code&gt; it returns that your bundle is up to date. In this example the serv gem is not in the Gemfile.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle outdated serv
  Fetching gem metadata from https://rubygems.org/..........
  Fetching gem metadata from https://rubygems.org/..
  Resolving dependencies...

  Your bundle is up to date!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was looking at the &lt;code&gt;bundler/lib/bundler/cli.rb&lt;/code&gt; files. In the bundle desc inject section I found a def not_found_message that looks similar to what I want to do; identify a missing gem.&lt;/p&gt;

&lt;p&gt;def not_found_message(missing_gem_name, alternatives) message = "Could not find gem '#{missing_gem_name}'."&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# This is called as the result of a GemNotFound, let's see if
# there's any similarly named ones we can propose instead
alternate_names = alternatives.map { |a| a.respond_to?(:name) ? a.name : a }
suggestions = SimilarityDetector.new(alternate_names).similar_word_list(missing_gem_name)
message += "\nDid you mean #{suggestions}?" if suggestions
message
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ran `bundle inject&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle inject blurg 1.0.0
  Fetching gem metadata from https://rubygems.org/..........
  Fetching gem metadata from https://rubygems.org/..
  Resolving dependencies...
  Could not find gem 'blurg (= 1.0.0) ruby' in the gems available on this machine.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This seemed closer to the error I want to see when I run bundle outdated non-existing-gem so I decide to check out a few more command to see if I could find one with a message I'd like to see.&lt;/p&gt;

&lt;p&gt;I ran &lt;code&gt;bundle show serv&lt;/code&gt; (The serv gem is NOT in the Gemfile.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle show serv
  Could not find gem 'serv'.
  Did you mean sdoc?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is even closer to the error I want to see. So I checked out the code in the desc show section of the bundler/lib/bundler/cli.rb file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;desc "show [GEM]", "Shows all gems that are part of the bundle, or the path to a given gem"
long_desc &amp;lt;&amp;lt;-D
  Show lists the names and versions of all gems that are required by your Gemfile.
  Calling show with [GEM] will list the exact location of that gem on your machine.
D
method_option "paths", :type =&amp;gt; :boolean,
  :banner =&amp;gt; "List the paths of all gems that are required by your Gemfile."
def show(gem_name = nil)
  Bundler.ui.silence do
    Bundler.definition.validate_ruby!
    Bundler.load.lock
  end

  if gem_name
    if gem_name == "bundler"
      path = File.expand_path("../../..", __FILE__)
    else
      spec = select_spec(gem_name, :regex_match)
      return unless spec
      path = spec.full_gem_path
      if !File.directory?(path)
        Bundler.ui.warn "The gem #{gem_name} has been deleted. It was installed at:"
      end
    end
    return Bundler.ui.info(path)
  end

  if options[:paths]
    Bundler.load.specs.sort_by { |s| s.name }.map do |s|
      Bundler.ui.info s.full_gem_path
    end
  else
    Bundler.ui.info "Gems included by the bundle:"
    Bundler.load.specs.sort_by { |s| s.name }.each do |s|
      Bundler.ui.info "  * #{s.name} (#{s.version}#{s.git_version})"
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I am now working on a path that will lead me to the answer…&lt;/p&gt;

&lt;h3 id="joyces-friday"&gt;Joyce's Friday&lt;/h3&gt;
&lt;p&gt;Started looking at another bundler feature/issue. The feature I am looking to add is when you &lt;code&gt;bundle update&lt;/code&gt;, it shows the old version of the gem being updated. I started a rspec test for it.&lt;/p&gt;

&lt;p&gt;I received feedback and suggestions for my first addition/fix to the Bundler repo. I made improvements to it based on the comment I received. I made a method to store &lt;code&gt;Bundler.which(“git”)&lt;/code&gt; in an instance variable inside bundler.rb. According to mentor Andre, we store it in an instance variable so we only have to look for git once. Instead of having to keep looking for git again and again repeatedly. This technique is called “"memoization."&lt;/p&gt;

&lt;p&gt;Original:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;raise GitError, “Git is not installed!” if !Bundler.which(“git”)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Improved:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;raise GitError, "Git is not installed!" if !Bundler.git_present?
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Week 7 Day 33 Rebasing &amp; Windows Issues</title>
    <link rel="alternate" href="/2013/08/29/week7-day33.html"/>
    <id>/2013/08/29/week7-day33.html</id>
    <published>2013-08-30T02:02:00Z</published>
    <updated>2013-08-30T02:02:00Z</updated>
    <author>
      <name>RGSoCBundler</name>
    </author>
    <content type="html">&lt;h1 id="week-7-day-33"&gt;Week 7 Day 33&lt;/h1&gt;
&lt;p&gt;Thursday, August 29 2013&lt;/p&gt;

&lt;h2 id="rebasing--windows-issues"&gt;Rebasing &amp;amp; Windows Issues&lt;/h2&gt;

&lt;h3 id="joyces-thursday"&gt;Joyce's Thursday&lt;/h3&gt;

&lt;p&gt;After seeing that my test fails and passes from yesterday, I changed the include string to what 
the better error message could be.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe "without git installed" do
it "prints a better error message" do

install_gemfile &amp;lt;&amp;lt;-G
  git "#{lib_path('foo-1.0')}", :branch =&amp;gt; "omg" do
    gem 'foo'
  end
G

bundle "update"
expect(out).to include("Git is not installed!")   end end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read some more and got the message to print when bundle update was ran without git installed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;raise GitError, "Git is not installed!" if !Bundler.which("git")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This issue was particularly for Windows when the user tries to bundle install. I had moved to an old Mac to make learning web development easier. Now back to Windows. I then setup my Windows and tested it on my Windows.&lt;/p&gt;

&lt;h3 id="jens-thursday"&gt;Jen's Thursday&lt;/h3&gt;

&lt;p&gt;I spent the day going through the messages on all the PR I have out. Fixing, squashing, rebasing.&lt;/p&gt;

&lt;p&gt;I spent a lot of time reading about and changing the sass files. I was trying to get the footer to do something particular. It didn't work quite right but I think it still looks good. At least now I know more about sass. It does look a lot cleaner than css. I added a lower nav bar that I hope gets approved.&lt;/p&gt;

&lt;p&gt;I showed the people at the Meetup group how to squash commits. We researched rebasing vs. merging. &lt;strong&gt;&lt;a href="http://stackoverflow.com/questions/804115/git-rebase-vs-git-merge"&gt;This is the answer I found on Stack Overflow by Rob Di Marco&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Short Version&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Merge takes all the changes in one branch and merge them into another branch in one commit.&lt;/li&gt;
  &lt;li&gt;Rebase says I want the point at which I branched to move to a new starting point
So when do you use either one?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Merge&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let's say you have created a branch for the purpose of developing 
a single feature. When you want to bring those changes back to master, 
you probably want merge (you don't care about maintaining all of 
the interim commits).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Rebase&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A second scenario would be if you started doing some development and 
then another developer made an unrelated change. You probably want to 
pull and then rebase to base your changes from the current version 
from the repo.&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
</feed>
